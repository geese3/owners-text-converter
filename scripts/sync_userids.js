/**
 * useridÎ•º Authentication Ïù¥Î©îÏùºÍ≥º ÏùºÏπòÏãúÌÇ§Í∏∞
 * rutin00 -> rutin008
 */

const admin = require('firebase-admin');
const serviceAccount = require('../../text_to_excel_converter/texttoexcel-af321-firebase-adminsdk-fbsvc-d123064bb3.json');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

async function syncUserIds() {
  try {
    console.log('üîÑ userid ÎèôÍ∏∞Ìôî Ï§ë...\n');

    // Authentication ÏÇ¨Ïö©Ïûê Î™©Î°ù
    const authUsers = await admin.auth().listUsers(1000);
    const authMap = {};
    authUsers.users.forEach(user => {
      authMap[user.uid] = user.email;
    });

    // Firestore ÏÇ¨Ïö©ÏûêÎì§
    const snapshot = await db.collection('users').get();
    
    const batch = db.batch();
    let updateCount = 0;

    console.log('=' .repeat(70));
    
    snapshot.forEach((doc) => {
      const data = doc.data();
      const authEmail = authMap[doc.id];
      
      if (!authEmail) return;
      
      // Ïù¥Î©îÏùºÏóêÏÑú @ ÏïûÎ∂ÄÎ∂Ñ Ï∂îÏ∂ú
      const correctUserid = authEmail.split('@')[0];
      
      if (data.userid !== correctUserid) {
        console.log(`\nüîß UID: ${doc.id}`);
        console.log(`   Í∏∞Ï°¥ userid: ${data.userid}`);
        console.log(`   ÏàòÏ†ï userid: ${correctUserid}`);
        console.log(`   Ïù¥Î©îÏùº: ${authEmail}`);
        
        const userRef = db.collection('users').doc(doc.id);
        batch.update(userRef, {
          userid: correctUserid,
          updatedAt: new Date().toISOString()
        });
        updateCount++;
      } else {
        console.log(`‚úÖ ${data.userid}: Ïù¥ÎØ∏ ÏùºÏπò`);
      }
    });

    if (updateCount > 0) {
      await batch.commit();
      console.log(`\n‚ú® ${updateCount}Î™ÖÏùò useridÍ∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§!`);
    } else {
      console.log('\n‚úÖ Î™®Îì† useridÍ∞Ä Ïù¥ÎØ∏ ÏùºÏπòÌï©ÎãàÎã§!');
    }

    console.log('\n' + '=' .repeat(70));
    console.log('\nüìã ÏµúÏ¢Ö Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥:\n');

    // ÏµúÏ¢Ö ÌôïÏù∏
    const finalSnapshot = await db.collection('users').get();
    finalSnapshot.forEach((doc) => {
      const data = doc.data();
      const authEmail = authMap[doc.id];
      console.log(`Î°úÍ∑∏Ïù∏ ÏïÑÏù¥Îîî: ${data.userid}`);
      console.log(`  Ïù¥Î©îÏùº: ${authEmail}`);
      console.log(`  Ïó≠Ìï†: ${data.role}`);
      console.log('');
    });

    console.log('=' .repeat(70));
    console.log('\nüí° Ïù¥Ï†ú Îã§Ïùå ÏïÑÏù¥ÎîîÎ°ú Î°úÍ∑∏Ïù∏ÌïòÏÑ∏Ïöî:\n');
    
    finalSnapshot.forEach((doc) => {
      const data = doc.data();
      console.log(`  - ${data.userid}`);
    });
    
    console.log('');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
    process.exit(1);
  }
}

syncUserIds();

