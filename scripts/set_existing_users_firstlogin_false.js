/**
 * Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÎì§Ïùò isFirstLoginÏùÑ falseÎ°ú ÏÑ§Ï†ï
 */

const admin = require('firebase-admin');
const serviceAccount = require('../../text_to_excel_converter/texttoexcel-af321-firebase-adminsdk-fbsvc-d123064bb3.json');

if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
}

const db = admin.firestore();

async function setFirstLoginFalse() {
  try {
    console.log('üîÑ Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÎì§Ïùò isFirstLoginÏùÑ falseÎ°ú ÏÑ§Ï†ï Ï§ë...\n');

    const snapshot = await db.collection('users').get();
    const batch = db.batch();
    let count = 0;

    snapshot.forEach((doc) => {
      const data = doc.data();
      
      // test ÏÇ¨Ïö©ÏûêÎäî Ï†úÏô∏ (Ïã§Ï†ú ÏµúÏ¥à Î°úÍ∑∏Ïù∏ ÌÖåÏä§Ìä∏Ïö©)
      if (data.userid === 'test') {
        console.log(`‚è≠Ô∏è  ${data.userid}: Í±¥ÎÑàÎúÄ (ÌÖåÏä§Ìä∏Ïö©)`);
        return;
      }
      
      // isFirstLoginÏù¥ ÏóÜÍ±∞ÎÇò trueÏù∏ Í≤ΩÏö∞Îßå ÏóÖÎç∞Ïù¥Ìä∏
      if (data.isFirstLogin === undefined || data.isFirstLogin === true) {
        console.log(`‚úÖ ${data.userid}: isFirstLoginÏùÑ falseÎ°ú ÏÑ§Ï†ï`);
        batch.update(doc.ref, {
          isFirstLogin: false,
          updatedAt: new Date().toISOString()
        });
        count++;
      } else {
        console.log(`‚úì ${data.userid}: Ïù¥ÎØ∏ false`);
      }
    });

    if (count > 0) {
      await batch.commit();
      console.log(`\n‚ú® ${count}Î™ÖÏùò ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§!`);
    } else {
      console.log('\n‚úÖ Î™®Îì† ÏÇ¨Ïö©ÏûêÍ∞Ä Ïù¥ÎØ∏ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
    }

    console.log('\nÏµúÏ¢Ö ÌôïÏù∏:\n');
    const final = await db.collection('users').get();
    final.forEach((doc) => {
      const data = doc.data();
      console.log(`${data.userid}: isFirstLogin = ${data.isFirstLogin}`);
    });
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
    process.exit(1);
  }
}

setFirstLoginFalse();

